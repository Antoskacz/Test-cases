import streamlit as st
import pandas as pd
from pathlib import Path
import copy
from core import (
    load_json, save_json,
    PROJECTS_PATH, KROKY_PATH,
    generate_testcase, export_to_excel,
    PRIORITY_MAP, COMPLEXITY_MAP
)

# ---------- Konfigurace vzhledu ----------
st.set_page_config(page_title="TestCase Builder", layout="wide", page_icon="üß™")

CUSTOM_CSS = """
<style>
body { background-color: #121212; color: #EAEAEA; }
[data-testid="stAppViewContainer"] { background: linear-gradient(145deg, #181818, #1E1E1E); }
[data-testid="stSidebar"] { background: linear-gradient(180deg, #1C1C1C, #181818); border-right: 1px solid #333; }
h1, h2, h3 { color: #F1F1F1; font-weight: 600; }
div[data-testid="stForm"], div[data-testid="stExpander"] {
    background-color: #1A1A1A; border-radius: 10px; padding: 1rem; border: 1px solid #333;
}
button[kind="primary"] { background: linear-gradient(90deg, #4e54c8, #8f94fb); color: white !important; }
button[kind="secondary"] { background: #292929; color: #CCC !important; border: 1px solid #555; }
.stTextInput > div > div > input, textarea, select {
    background-color: #222; color: #EEE !important; border-radius: 6px; border: 1px solid #444;
}
.stDataFrame { background-color: #1C1C1C !important; }
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

# ---------- Pomocn√© funkce ----------
def get_projects():
    return load_json(PROJECTS_PATH)

def get_steps():
    return load_json(KROKY_PATH)

def ensure_project(projects, name, subject=None):
    if name not in projects:
        projects[name] = {"next_id": 1, "subject": subject or "UAT2\\Antosova\\", "scenarios": []}
        save_json(PROJECTS_PATH, projects)
    return projects

def make_df(projects, project_name):
    sc = projects.get(project_name, {}).get("scenarios", [])
    if not sc:
        return pd.DataFrame()
    rows = []
    for tc in sc:
        rows.append({
            "Order": tc.get("order_no"),
            "Test Name": tc.get("test_name"),
            "Action": tc.get("akce"),
            "Segment": tc.get("segment"),
            "Channel": tc.get("kanal"),
            "Priority": tc.get("priority"),
            "Complexity": tc.get("complexity"),
            "Kroky": len(tc.get("kroky", []))
        })
    return pd.DataFrame(rows).sort_values(by="Order", ascending=True)

# ---------- Automatick√° komplexita ----------
def get_automatic_complexity(pocet_kroku):
    """Automaticky urƒç√≠ komplexitu podle poƒçtu krok≈Ø"""
    if pocet_kroku <= 5:
        return "5-Low"
    elif pocet_kroku <= 10:
        return "4-Medium"
    elif pocet_kroku <= 15:
        return "3-Big"
    elif pocet_kroku <= 20:
        return "2-Huge"
    else:
        return "1-Giant"



# ---------- Sidebar ----------
st.sidebar.title("üìÅ Projekt")
projects = get_projects()
project_names = list(projects.keys())

selected_project = st.sidebar.selectbox(
    "Vyber projekt",
    options=["‚Äî vyber ‚Äî"] + project_names,
    index=0
)
new_project_name = st.sidebar.text_input("N√°zev nov√©ho projektu", placeholder="Nap≈ô. CCCTR-XXXX ‚Äì N√°zev")

# ZMƒöNA: Pouze "Vytvo≈ôit projekt"
if st.sidebar.button("‚úÖ Vytvo≈ôit projekt"):
    if new_project_name.strip():
        projects = ensure_project(projects, new_project_name.strip())
        selected_project = new_project_name.strip()
        st.rerun()
    else:
        st.sidebar.warning("Zadej n√°zev projektu")

# NOV√â: Tlaƒç√≠tka pro spr√°vu projektu (pokud je projekt vybr√°n)
if selected_project != "‚Äî vyber ‚Äî" and selected_project in projects:
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚öôÔ∏è Spr√°va projektu")
    
    # Upravit n√°zev projektu
    with st.sidebar.expander("‚úèÔ∏è Upravit n√°zev projektu"):
        new_name = st.text_input("Nov√Ω n√°zev projektu", value=selected_project)
        if st.button("Ulo≈æit nov√Ω n√°zev"):
            if new_name.strip() and new_name != selected_project:
                projects[new_name] = projects.pop(selected_project)
                selected_project = new_name
                save_json(PROJECTS_PATH, projects)
                st.success("‚úÖ N√°zev projektu zmƒõnƒõn")
                st.rerun()
    
    # Upravit subject
    with st.sidebar.expander("üìù Upravit Subject"):
        current_subject = projects[selected_project].get("subject", "UAT2\\Antosova\\")
        new_subject = st.text_input("Nov√Ω Subject", value=current_subject)
        if st.button("Ulo≈æit Subject"):
            if new_subject.strip():
                projects[selected_project]["subject"] = new_subject.strip()
                save_json(PROJECTS_PATH, projects)
                st.success("‚úÖ Subject zmƒõnƒõn")
                st.rerun()
    
    # Smazat projekt
    with st.sidebar.expander("üóëÔ∏è Smazat projekt"):
        st.warning(f"Chce≈° smazat projekt '{selected_project}'?")
        if st.button("ANO, smazat projekt"):
            projects.pop(selected_project)
            save_json(PROJECTS_PATH, projects)
            st.success(f"‚úÖ Projekt '{selected_project}' smaz√°n")
            st.rerun()



# ---------- Hlavn√≠ ƒç√°st - hlavn√≠ strana aplikace ----------
st.title("üß™ TestCase Builder ‚Äì GUI")

if selected_project == "‚Äî vyber ‚Äî":
    st.info("Vyber nebo vytvo≈ô projekt v lev√©m panelu.")
    st.stop()

# Kontrola, zda projekt existuje v datech
if selected_project not in projects:
    st.error(f"Projekt '{selected_project}' nebyl nalezen v datech. Vyber jin√Ω projekt.")
    st.stop()

# NOV√Å HLAVIƒåKA
st.subheader("üìä P≈ôehled projektu")

# Z√°kladn√≠ informace pod sebou
st.write(f"**Aktivn√≠ projekt:** {selected_project}")
st.write(f"**Subject:** {projects[selected_project].get('subject', 'UAT2\\\\Antosova\\\\')}")
st.write(f"**Poƒçet sc√©n√°≈ô≈Ø:** {len(projects[selected_project].get('scenarios', []))}")

st.markdown("---")

# SEZNAM SC√âN√Å≈ò≈Æ A P≈òEƒå√çSLOV√ÅN√ç
scenarios = projects[selected_project].get("scenarios", [])

if scenarios:
    st.subheader("üìã Seznam sc√©n√°≈ô≈Ø")
    
    # Tabulka sc√©n√°≈ô≈Ø
    df = make_df(projects, selected_project)
    if not df.empty:
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Order": st.column_config.NumberColumn("ƒå√≠slo", width="small"),
                "Test Name": st.column_config.TextColumn("N√°zev testu", width="large"),
                "Action": st.column_config.TextColumn("Akce", width="medium"),
                "Segment": st.column_config.TextColumn("Segment", width="small"),
                "Channel": st.column_config.TextColumn("Kan√°l", width="small"),
                "Priority": st.column_config.TextColumn("Priorita", width="small"),
                "Complexity": st.column_config.TextColumn("Komplexita", width="small"),
                "Kroky": st.column_config.NumberColumn("Krok≈Ø", width="small")
            }
        )
        
        # Tlaƒç√≠tko pro p≈ôeƒç√≠slov√°n√≠
        if st.button("üî¢ P≈ôeƒç√≠slovat sc√©n√°≈ôe od 001", use_container_width=True):
            scen = projects[selected_project]["scenarios"]
            for i, t in enumerate(sorted(scen, key=lambda x: x["order_no"]), start=1):
                nove_cislo = f"{i:03d}"
                t["order_no"] = i
                
                # P≈ôegenerov√°n√≠ n√°zvu s nov√Ωm ƒç√≠slem
                if "_" in t["test_name"]:
                    parts = t["test_name"].split("_", 1)
                    if parts[0].isdigit() and len(parts[0]) <= 3:
                        t["test_name"] = f"{nove_cislo}_{parts[1]}"
                    else:
                        t["test_name"] = f"{nove_cislo}_{t['test_name']}"
                else:
                    t["test_name"] = f"{nove_cislo}_{t['test_name']}"
            
            projects[selected_project]["scenarios"] = scen
            save_json(PROJECTS_PATH, projects)
            st.success("‚úÖ Sc√©n√°≈ôe a n√°zvy byly p≈ôeƒç√≠slov√°ny.")
            st.rerun()

    st.markdown("---")

    # ANAL√ùZA SC√âN√Å≈ò≈Æ - STROMOV√Å STRUKTURA
st.subheader("üå≥ Anal√Ωza sc√©n√°≈ô≈Ø")

# Shrom√°≈ædƒõn√≠ dat pro stromovou strukturu
segment_data = {"B2C": {}, "B2B": {}}

for scenario in scenarios:
    segment = scenario.get("segment", "NEZN√ÅM√ù")
    kanal = scenario.get("kanal", "NEZN√ÅM√ù")
    
    # SPR√ÅVN√Å DETEKCE TECHNOLOGIE z n√°zvu test case
    test_name = scenario.get("test_name", "")
    technologie = "DSL"  # v√Ωchoz√≠ hodnota
    
    # Detekce technologie z n√°zvu test case
    if "FIBER" in test_name:
        technologie = "FIBER"
    elif "FWA_BISI" in test_name:
        technologie = "FWA BISI" 
    elif "FWA_BI" in test_name:
        technologie = "FWA BI"
    elif "CABLE" in test_name:
        technologie = "CABLE"
    elif "HLAS" in test_name:
        technologie = "HLAS"
    elif "DSL" in test_name:
        technologie = "DSL"
    
    akce = scenario.get("akce", "NEZN√ÅM√Å")
    
    if segment not in segment_data:
        segment_data[segment] = {}
    
    if kanal not in segment_data[segment]:
        segment_data[segment][kanal] = {}
        
    if technologie not in segment_data[segment][kanal]:
        segment_data[segment][kanal][technologie] = []
        
    if akce not in segment_data[segment][kanal][technologie]:
        segment_data[segment][kanal][technologie].append(akce)

# VYTVO≈òEN√ç STROMOV√â STRUKTURY PODLE TV√âHO N√ÅVRHU
col_b2c, col_b2b = st.columns(2)

with col_b2c:
    with st.expander("üë• B2C", expanded=True):
        if "B2C" in segment_data and segment_data["B2C"]:
            for kanal in segment_data["B2C"]:
                # KAN√ÅL - vƒõt≈°√≠ a tuƒçnƒõ
                st.markdown(f"<h4 style='margin-bottom: 5px;'>{kanal}</h4>", unsafe_allow_html=True)
                
                for technologie in segment_data["B2C"][kanal]:
                    # TECHNOLOGIE - tuƒçnƒõ
                    st.markdown(f"<strong>{technologie}</strong>", unsafe_allow_html=True)
                    
                    # Akce odsazen√© vedle technologie
                    for akce in segment_data["B2C"][kanal][technologie]:
                        st.write(f"‚ÄÉ‚ÄÉ‚Ä¢ {akce}")
                
                # Oddƒõlovaƒç mezi kan√°ly
                if kanal != list(segment_data["B2C"].keys())[-1]:
                    st.markdown("<hr style='margin: 10px 0;'>", unsafe_allow_html=True)
        else:
            st.write("≈Ω√°dn√© B2C sc√©n√°≈ôe")

with col_b2b:
    with st.expander("üè¢ B2B", expanded=True):
        if "B2B" in segment_data and segment_data["B2B"]:
            for kanal in segment_data["B2B"]:
                # KAN√ÅL - vƒõt≈°√≠ a tuƒçnƒõ
                st.markdown(f"<h4 style='margin-bottom: 5px;'>{kanal}</h4>", unsafe_allow_html=True)
                
                for technologie in segment_data["B2B"][kanal]:
                    # TECHNOLOGIE - tuƒçnƒõ
                    st.markdown(f"<strong>{technologie}</strong>", unsafe_allow_html=True)
                    
                    # Akce odsazen√© vedle technologie
                    for akce in segment_data["B2B"][kanal][technologie]:
                        st.write(f"‚ÄÉ‚ÄÉ‚Ä¢ {akce}")
                
                # Oddƒõlovaƒç mezi kan√°ly
                if kanal != list(segment_data["B2B"].keys())[-1]:
                    st.markdown("<hr style='margin: 10px 0;'>", unsafe_allow_html=True)
        else:
            st.write("≈Ω√°dn√© B2B sc√©n√°≈ôe")


# ---------- P≈ôid√°n√≠ sc√©n√°≈ôe ----------
st.subheader("‚ûï P≈ôidat nov√Ω sc√©n√°≈ô")
steps_data = get_steps()
akce_list = list(steps_data.keys())

with st.form("add_scenario"):
    veta = st.text_area("Vƒõta (po≈æadavek)", height=100, placeholder="Nap≈ô.: Aktivuj DSL na B2C p≈ôes kan√°l SHOP ‚Ä¶")
    akce = st.selectbox("Akce (z kroky.json)", options=akce_list)
    
    # Automatick√° komplexita - OPRAVEN√â NAƒå√çT√ÅN√ç POƒåTU KROK≈Æ
    from core import get_steps_from_action
    kroky_pro_akci = get_steps_from_action(akce, steps_data)
    pocet_kroku = len(kroky_pro_akci)
    
    auto_complexity = get_automatic_complexity(pocet_kroku)
    
    colp, colc = st.columns(2)
    with colp:
        priority = st.selectbox("Priorita", options=list(PRIORITY_MAP.values()), index=1)
    with colc:
        # Zobraz√≠me automatickou komplexitu, ale umo≈æn√≠me zmƒõnu
        complexity = st.selectbox(
            "Komplexita", 
            options=list(COMPLEXITY_MAP.values()), 
            index=list(COMPLEXITY_MAP.values()).index(auto_complexity),
            help=f"Automaticky nastaveno na {auto_complexity} podle {pocet_kroku} krok≈Ø"
        )

    if st.form_submit_button("‚ûï P≈ôidat sc√©n√°≈ô"):
        if not veta.strip():
            st.error("Vƒõta nesm√≠ b√Ωt pr√°zdn√°.")
        elif not akce:
            st.error("Vyber akci (kroky.json).")
        else:
            tc = generate_testcase(
                project=selected_project,
                veta=veta.strip(),
                akce=akce,
                priority=priority,
                complexity=complexity,
                kroky_data=steps_data,
                projects_data=projects
            )
            st.success(f"‚úÖ Sc√©n√°≈ô p≈ôid√°n: {tc['test_name']}")
            st.rerun()

st.markdown("---")



# ---------- √öprava sc√©n√°≈ôe ----------
st.subheader("‚úèÔ∏è √öprava sc√©n√°≈ôe")
if not scenarios:
    st.info("Zat√≠m ≈æ√°dn√© sc√©n√°≈ôe pro √∫pravu.")
else:
    selected_row = st.selectbox(
        "Vyber sc√©n√°≈ô k √∫pravƒõ:",
        options=["‚Äî ≈æ√°dn√Ω ‚Äî"] + [f"{row['Order']} - {row['Test Name']}" for _, row in df.iterrows()],
        index=0
    )

    if selected_row != "‚Äî ≈æ√°dn√Ω ‚Äî":
        idx = int(selected_row.split(" - ")[0])
        scenario_list = projects[selected_project]["scenarios"]
        scenario_index = next((i for i, t in enumerate(scenario_list) if t["order_no"] == idx), None)
        scenario = scenario_list[scenario_index] if scenario_index is not None else None

        if scenario:
            with st.form("edit_scenario"):
                veta = st.text_area("Vƒõta", value=scenario["veta"], height=100)
                akce = st.selectbox("Akce", options=akce_list, index=akce_list.index(scenario["akce"]) if scenario["akce"] in akce_list else 0)
                priority = st.selectbox("Priorita", options=list(PRIORITY_MAP.values()), index=list(PRIORITY_MAP.values()).index(scenario["priority"]))
                complexity = st.selectbox("Komplexita", options=list(COMPLEXITY_MAP.values()), index=list(COMPLEXITY_MAP.values()).index(scenario["complexity"]))
                if st.form_submit_button("üíæ Ulo≈æit zmƒõny"):
                    # p≈ôeps√°n√≠ hodnot sc√©n√°≈ôe
                    scenario["veta"] = veta.strip()
                    scenario["akce"] = akce
                    scenario["priority"] = priority
                    scenario["complexity"] = complexity
                    # D≈ÆLE≈ΩIT√â: Pou≈æij spr√°vn√© naƒçten√≠ krok≈Ø
                    scenario["kroky"] = get_steps_from_action(akce, steps_data)
                    # p≈ôegenerov√°n√≠ test name
                    scenario["test_name"] = scenario["test_name"].split("_")[0] + "_" + veta.strip().replace(" ", "_")
                    # ulo≈æen√≠ zmƒõn
                    projects[selected_project]["scenarios"][scenario_index] = scenario
                    save_json(PROJECTS_PATH, projects)
                    st.success("‚úÖ Zmƒõny ulo≈æeny a props√°ny do projektu.")
                    st.rerun()

st.markdown("---")

# ---------- Smaz√°n√≠ sc√©n√°≈ôe ----------
st.subheader("üóëÔ∏è Smaz√°n√≠ sc√©n√°≈ôe")
if not scenarios:  # M√≠sto df.empty pou≈æijeme scenarios
    st.info("Zat√≠m ≈æ√°dn√© sc√©n√°≈ôe pro smaz√°n√≠.")
else:
    to_delete = st.selectbox(
        "Vyber sc√©n√°≈ô ke smaz√°n√≠:",
        options=["‚Äî ≈æ√°dn√Ω ‚Äî"] + [f"{row['Order']} - {row['Test Name']}" for _, row in df.iterrows()],
        index=0,
        key="delete_selector"  # P≈ôid√°me key aby se nepletl s p≈ôedchoz√≠m selectboxem
    )
    if to_delete != "‚Äî ≈æ√°dn√Ω ‚Äî":
        idx = int(to_delete.split(" - ")[0])
        if st.button("üóëÔ∏è Potvrdit smaz√°n√≠ sc√©n√°≈ôe"):
            scen = [t for t in projects[selected_project]["scenarios"] if t.get("order_no") != idx]
            for i, t in enumerate(scen, start=1):
                t["order_no"] = i
            projects[selected_project]["scenarios"] = scen
            save_json(PROJECTS_PATH, projects)
            st.success("Sc√©n√°≈ô smaz√°n a po≈ôad√≠ p≈ôepoƒç√≠t√°no.")
            st.rerun()



# ---------- Informace o kroc√≠ch ----------
# ---------- Informace o kroc√≠ch ----------

# FUNKCE PRO ZOBRAZEN√ç AKCE
def zobraz_akci_s_upravou(akce, obsah_akce):
    """Zobraz√≠ akci s mo≈ænost√≠ rychl√© editace"""
    
    # Z√≠sk√°n√≠ krok≈Ø a popisu
    if isinstance(obsah_akce, dict) and "steps" in obsah_akce:
        kroky = obsah_akce.get("steps", [])
        popis_akce = obsah_akce.get("description", "Bez popisu")
    else:
        kroky = obsah_akce if isinstance(obsah_akce, list) else []
        popis_akce = "Bez popisu"
    
    pocet_kroku = len(kroky)
    
    # Kontejner pro akci
    with st.container():
        # Hlaviƒçka akce s editac√≠
        col_nazev, col_edit = st.columns([3, 1])
        
        with col_nazev:
            st.markdown(f"**{akce.upper()}**")
            st.markdown(f"*({pocet_kroku} krok≈Ø)*")
            st.caption(f"üìù {popis_akce}")
        
        with col_edit:
            # Tlaƒç√≠tko pro editaci
            if st.button("‚úèÔ∏è Upravit", key=f"edit_{akce}", use_container_width=True):
                st.session_state[f"edit_akce_{akce}"] = True
        
        # N√°hled krok≈Ø
        with st.expander(f"üëÄ N√°hled ({pocet_kroku} krok≈Ø)", expanded=False):
            if pocet_kroku > 0:
                for i, krok in enumerate(kroky, 1):
                    if isinstance(krok, dict):
                        desc = krok.get('description', '')
                        exp = krok.get('expected', '')
                        st.write(f"**{i}. {desc}**")
                        if exp:
                            st.write(f"   *Oƒçek√°v√°n√≠: {exp}*")
                    else:
                        st.write(f"{i}. {krok}")
                    if i < len(kroky):
                        st.divider()
            else:
                st.write("≈Ω√°dn√© kroky")
        
        # VYSKAKOVAC√ç OKNO PRO EDITACI
        if st.session_state.get(f"edit_akce_{akce}", False):
            # Pou≈æijeme st.dialog pro modern√≠ vyskakovac√≠ okno
            with st.dialog(f"Editace akce: {akce}"):
                st.subheader(f"‚úèÔ∏è Editace akce: {akce}")
                
                # Popis akce
                novy_popis = st.text_input("Popis akce", value=popis_akce, key=f"desc_{akce}")
                
                st.markdown("---")
                st.write("**Spr√°va krok≈Ø:**")
                
                # Naƒçten√≠ aktu√°ln√≠ch krok≈Ø do session state
                if f"kroky_{akce}" not in st.session_state:
                    st.session_state[f"kroky_{akce}"] = kroky.copy()
                
                # Zobrazen√≠ a editace krok≈Ø
                if st.session_state[f"kroky_{akce}"]:
                    st.write("**Aktu√°ln√≠ kroky:**")
                    for i, krok in enumerate(st.session_state[f"kroky_{akce}"]):
                        col1, col2 = st.columns([4, 1])
                        
                        with col1:
                            if isinstance(krok, dict):
                                st.text_area(
                                    f"Krok {i+1} - Description", 
                                    value=krok.get('description', ''),
                                    key=f"krok_{akce}_{i}_desc",
                                    height=80
                                )
                                st.text_area(
                                    f"Krok {i+1} - Expected", 
                                    value=krok.get('expected', ''),
                                    key=f"krok_{akce}_{i}_exp", 
                                    height=80
                                )
                            else:
                                st.text_area(
                                    f"Krok {i+1}", 
                                    value=krok,
                                    key=f"krok_{akce}_{i}",
                                    height=80
                                )
                        
                        with col2:
                            # Tlaƒç√≠tko pro smaz√°n√≠ kroku
                            if st.button("üóëÔ∏è", key=f"del_{akce}_{i}", use_container_width=True):
                                if i < len(st.session_state[f"kroky_{akce}"]):
                                    st.session_state[f"kroky_{akce}"].pop(i)
                                    st.rerun()
                        
                        st.markdown("---")
                else:
                    st.info("≈Ω√°dn√© kroky")
                
                # FORMUL√Å≈ò PRO P≈òID√ÅN√ç NOV√âHO KROKU
                with st.form(f"add_step_form_{akce}"):
                    st.write("**P≈ôidat nov√Ω krok:**")
                    new_desc = st.text_area("Description*", placeholder="Popis kroku - co se m√° udƒõlat", key=f"new_desc_{akce}", height=80)
                    new_expected = st.text_area("Expected*", placeholder="Oƒçek√°van√Ω v√Ωsledek - co se m√° st√°t", key=f"new_exp_{akce}", height=80)
                    
                    if st.form_submit_button("‚ûï P≈ôidat krok", use_container_width=True):
                        if new_desc.strip():
                            st.session_state[f"kroky_{akce}"].append({
                                "description": new_desc.strip(),
                                "expected": new_expected.strip()
                            })
                            st.rerun()
                
                # Tlaƒç√≠tka pro ulo≈æen√≠/zru≈°en√≠
                col_save, col_cancel, col_delete = st.columns([2, 2, 1])
                
                with col_save:
                    if st.button("üíæ Ulo≈æit zmƒõny", key=f"save_{akce}", use_container_width=True):
                        # Ulo≈æen√≠ zmƒõn do kroky.json
                        kroky_data = get_global_steps()
                        
                        # Aktualizace hodnot krok≈Ø z text areas
                        updated_kroky = []
                        for i in range(len(st.session_state[f"kroky_{akce}"])):
                            desc_key = f"krok_{akce}_{i}_desc"
                            exp_key = f"krok_{akce}_{i}_exp"
                            
                            if desc_key in st.session_state:
                                desc = st.session_state[desc_key]
                                exp = st.session_state[exp_key] if exp_key in st.session_state else ""
                                updated_kroky.append({
                                    "description": desc,
                                    "expected": exp
                                })
                        
                        kroky_data[akce] = {
                            "description": novy_popis,
                            "steps": updated_kroky
                        }
                        save_global_steps(kroky_data)
                        st.success(f"‚úÖ Akce '{akce}' byla upravena!")
                        st.session_state[f"edit_akce_{akce}"] = False
                        # Aktualizace cel√© aplikace
                        refresh_all_data()
                        st.rerun()
                
                with col_cancel:
                    if st.button("‚ùå Zru≈°it", key=f"cancel_{akce}", use_container_width=True):
                        st.session_state[f"edit_akce_{akce}"] = False
                        if f"kroky_{akce}" in st.session_state:
                            del st.session_state[f"kroky_{akce}"]
                        st.rerun()
                
                with col_delete:
                    if st.button("üóëÔ∏è Smazat", key=f"delete_{akce}", use_container_width=True):
                        # Potvrzen√≠ smaz√°n√≠
                        st.session_state[f"confirm_delete_{akce}"] = True
                        st.rerun()
                
                # Potvrzen√≠ smaz√°n√≠ akce
                if st.session_state.get(f"confirm_delete_{akce}", False):
                    st.error(f"Opravdu chce≈° smazat akci '{akce}'?")
                    col_yes, col_no = st.columns(2)
                    with col_yes:
                        if st.button("ANO, smazat", key=f"yes_delete_{akce}", use_container_width=True):
                            kroky_data = get_global_steps()
                            if akce in kroky_data:
                                del kroky_data[akce]
                                save_global_steps(kroky_data)
                                st.success(f"‚úÖ Akce '{akce}' byla smaz√°na!")
                                st.session_state[f"edit_akce_{akce}"] = False
                                st.session_state[f"confirm_delete_{akce}"] = False
                                refresh_all_data()
                                st.rerun()
                    with col_no:
                        if st.button("NE, zachovat", key=f"no_delete_{akce}", use_container_width=True):
                            st.session_state[f"confirm_delete_{akce}"] = False
                            st.rerun()
        
        st.markdown("---")

# HLAVN√ç ƒå√ÅST - P≈òEHLED KROK≈Æ
with st.expander("üìä P≈ôehled krok≈Ø podle akc√≠"):
    st.subheader("Kroky dostupn√© v syst√©mu")
    steps_data = get_steps()
    
    # Tlaƒç√≠tko pro p≈ôid√°n√≠ nov√© akce
    if st.button("‚ûï P≈ôidat novou akci", key="add_new_action_main", use_container_width=True):
        st.session_state["add_new_action"] = True
    
    # VYSKAKOVAC√ç OKNO PRO NOVOU AKCI
    if st.session_state.get("add_new_action", False):
        with st.dialog("Nov√° akce"):
            st.subheader("‚ûï P≈ôidat novou akci")
            
            with st.form("nova_akce_form"):
                nova_akce_nazev = st.text_input("N√°zev akce*", placeholder="Nap≈ô.: Aktivace_DSL")
                nova_akce_popis = st.text_input("Popis akce*", placeholder="Nap≈ô.: Aktivace DSL slu≈æby")
                
                st.write("**Kroky akce:**")
                
                # Inicializace session state pro kroky
                if 'new_steps' not in st.session_state:
                    st.session_state.new_steps = []
                
                # Zobrazen√≠ existuj√≠c√≠ch krok≈Ø
                if st.session_state.new_steps:
                    st.write("**P≈ôidan√© kroky:**")
                    for i, krok in enumerate(st.session_state.new_steps):
                        col_step, col_del = st.columns([4, 1])
                        with col_step:
                            st.text_input("Description*", value=krok['description'], key=f"new_step_{i}_desc", disabled=True)
                            st.text_input("Expected*", value=krok['expected'], key=f"new_step_{i}_exp", disabled=True)
                        with col_del:
                            if st.form_submit_button("üóëÔ∏è", key=f"del_new_step_{i}", disabled=False):
                                if i < len(st.session_state.new_steps):
                                    st.session_state.new_steps.pop(i)
                                    st.rerun()
                        st.markdown("---")
                
                # P≈ôid√°n√≠ nov√©ho kroku
                st.write("**P≈ôidat nov√Ω krok:**")
                new_step_desc = st.text_area("Description*", placeholder="Popis kroku - co se m√° udƒõlat", key="new_step_desc", height=60)
                new_step_expected = st.text_area("Expected*", placeholder="Oƒçek√°van√Ω v√Ωsledek - co se m√° st√°t", key="new_step_expected", height=60)
                
                col_add, col_clear = st.columns(2)
                with col_add:
                    if st.form_submit_button("‚ûï P≈ôidat krok", use_container_width=True):
                        if new_step_desc.strip() and new_step_expected.strip():
                            st.session_state.new_steps.append({
                                "description": new_step_desc.strip(),
                                "expected": new_step_expected.strip()
                            })
                            st.rerun()
                        else:
                            st.warning("Vypl≈àte obƒõ pole pro krok")
                with col_clear:
                    if st.form_submit_button("üóëÔ∏è Smazat v≈°e", use_container_width=True):
                        st.session_state.new_steps = []
                        st.rerun()
                
                # Tlaƒç√≠tka pro ulo≈æen√≠/zru≈°en√≠
                col_save, col_cancel = st.columns(2)
                with col_save:
                    if st.form_submit_button("üíæ Ulo≈æit novou akci", use_container_width=True):
                        if not nova_akce_nazev.strip() or not nova_akce_popis.strip() or not st.session_state.new_steps:
                            st.error("Vypl≈àte v≈°echny povinn√© pole (*) a p≈ôidejte alespo≈à jeden krok")
                        else:
                            kroky_data = get_global_steps()
                            kroky_data[nova_akce_nazev.strip()] = {
                                "description": nova_akce_popis.strip(),
                                "steps": st.session_state.new_steps.copy()
                            }
                            save_global_steps(kroky_data)
                            st.success(f"‚úÖ Akce '{nova_akce_nazev}' byla p≈ôid√°na!")
                            # Reset session state
                            st.session_state.new_steps = []
                            st.session_state["add_new_action"] = False
                            # AKTUALIZACE CEL√â APLIKACE
                            refresh_all_data()
                            st.rerun()
                
                with col_cancel:
                    if st.form_submit_button("‚ùå Zru≈°it", use_container_width=True):
                        st.session_state["add_new_action"] = False
                        st.session_state.new_steps = []
                        st.rerun()
    
    st.markdown("---")
    
    # Rozdƒõlen√≠ akc√≠ na FIX a ostatn√≠
    fix_akce = []
    ostatni_akce = []
    
    for akce in sorted(steps_data.keys()):
        if "FIX" in akce.upper():
            fix_akce.append(akce)
        else:
            ostatni_akce.append(akce)
    
    # Vytvo≈ô√≠me dva sloupce
    col_fix, col_ostatni = st.columns(2)
    
    with col_fix:
        st.markdown("### üîß FIX Akce")
        if fix_akce:
            for akce in fix_akce:
                zobraz_akci_s_upravou(akce, steps_data[akce])
        else:
            st.write("≈Ω√°dn√© FIX akce")
    
    with col_ostatni:
        st.markdown("### üìû Ostatn√≠ akce")
        if ostatni_akce:
            for akce in ostatni_akce:
                zobraz_akci_s_upravou(akce, steps_data[akce])
        else:
            st.write("≈Ω√°dn√© ostatn√≠ akce")

                
# ---------- Export ----------
st.subheader("üì§ Export do Excelu + Git push (jedn√≠m kliknut√≠m)")
if st.button("üíæ Exportovat a nahr√°t na GitHub"):
    try:
        out = export_to_excel(selected_project, projects)
        rel = Path(out).relative_to(Path(__file__).resolve().parent.parent)
        st.success(f"‚úÖ Export hotov√Ω: `{rel}`")
        st.download_button("‚¨áÔ∏è St√°hnout Excel", data=Path(out).read_bytes(),
                           file_name=Path(out).name,
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    except Exception as e:
        st.error(f"Export selhal: {e}")